No proposal about dealing with failures has been made in this paper. A set of known issues have been listed, but we __specifically__ did not take any position on the _how_ to cope efficiently with failures in MPI. Solving these issues is a outstandingly more challenging tasks that a single paper, as highlighted by all the potential solutions weighted in the fault tolerance groups of the the MPI Forum. As described in section II, the underlying mechanism used for our approach is the bare minimum, the one suggested in the MPI standard for MPI_ERRORS_RETURN error handler. While most of the MPI libraries available today do not supports the type of minimal requirement described in this paper, research projects around there libraries do. The scope of the paper was not around the support for the allowing the user to decide how to stop a faulty computation, but how to allow it to cope with this issue in order to achieve a minimal time to completion for it's scientific code despite failures.

ABFT techniques are well studied approaches, we know stable and efficient algorithms for most of the dense linear algebra problems (and some for sparse). It is not a niche as suggested by the reviewers, it is the core of most of the scientific applications running at scale today. If only dense linear algebra libraries are delivered in a fault tolerant version, this will be of a tremendous benefit for most of the applications running at scale, as a significant part of their execution time will be covered by highly efficient fault management solutions.
